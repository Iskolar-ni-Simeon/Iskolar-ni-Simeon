<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>... | Iskolar ni Simeon</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="/css/author.css">
    <!-- <script disable-devtool-auto src='https://cdn.jsdelivr.net/npm/disable-devtool@latest'></script> -->
    <meta name="theme-color" content="#296c32">
</head>
<body>
    <%- include('partials/header.ejs') %>
    <main class="author-page">
        <div class="author-hero mb-4 bg-success bg-opacity-10">
            <div class="container py-4">
                <div class="text-center placeholder-wave">
                    <h1 class="display-6 fw-bold text-success mb-2" id="authorName">
                        <span class="placeholder col-5"></span>
                    </h1>
                    <p class="lead text-muted" id="authorPublished">
                        <span class="placeholder col-1"></span> thesis pubished
                    </p>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="results-wrapper card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="results-container">
                                <%- include('partials/resultsContainer.ejs')%>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <script>
        function setupSaveButtons(savedTheses, toast, userId) {
            document.querySelectorAll('.save-btn').forEach(button => {
                const thesisId = button.dataset.thesisId;
                const saveText = button.querySelector('.save-text');
                
                if (userId.split('-')[0] === 'guest') {
                    button.disabled = true;
                    button.title = 'Please log in to save theses';
                    saveText.textContent = 'Log in to save';
                    return;
                }
                
                if (savedTheses.has(thesisId)) {
                    button.classList.add('active');
                    saveText.textContent = 'Saved';
                }
                button.addEventListener('click', async () => {
                    if (userId.split('-')[0] === 'guest') {
                        toast.show();
                        return;
                    }
                    if (button.disabled) return;
                    
                    const method = savedTheses.has(thesisId) ? 'remove' : 'add';
                    
                    button.disabled = true;
                    button.innerHTML = `<span class="spinner-border spinner-border-sm"></span>`;
                    try {
                        const response = await fetch(`${window.location.origin}/save/${thesisId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ method })
                        });
                        
                        if (response.ok) {
                            method === 'add' ? savedTheses.add(thesisId) : savedTheses.delete(thesisId);
                            button.classList.toggle('active', method === 'add');
                            button.innerHTML = `<i class="bi bi-bookmark-fill me-2"></i><span class="save-text">${method === 'add' ? 'Saved' : 'Save'}</span>`;
                            localStorage.setItem('savedTheses', JSON.stringify([...savedTheses]));
                        }
                    } catch (error) {
                        button.innerHTML = `<i class="bi bi-bookmark-fill me-2"></i><span class="save-text">${savedTheses.has(thesisId) ? 'Saved' : 'Save'}</span>`;
                    } finally {
                        button.disabled = false;
                    }
                });
            });
        }
        
        function setupPagination(totalPages) {
            let currentPage = 1;
            
            function showPage(pageNum) {
                document.querySelectorAll('.result-item').forEach(item => 
                    item.style.display = item.dataset.page == pageNum ? 'block' : 'none'
                );
                const pagination = document.querySelector('.pagination');
                if (!pagination) return;
                const prevPageBtn = document.getElementById('prevPage');
                const nextPageBtn = document.getElementById('nextPage');
                
                document.querySelectorAll('.pagination .page-item').forEach(item => {
                    if (!item.id) item.classList.toggle('active', item.querySelector(`[data-page="${pageNum}"]`));
                });
                prevPageBtn.classList.toggle('disabled', pageNum === 1);
                nextPageBtn.classList.toggle('disabled', pageNum === totalPages);
                currentPage = pageNum;
            }
            showPage(1);
            document.querySelectorAll('.pagination .page-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const page = e.currentTarget.dataset.page;
                    if (page) {
                        showPage(parseInt(page));
                    } else if (e.currentTarget.getAttribute('aria-label') === 'Previous' && currentPage > 1) {
                        showPage(currentPage - 1);
                    } else if (e.currentTarget.getAttribute('aria-label') === 'Next' && currentPage < totalPages) {
                        showPage(currentPage + 1);
                    }
                });
            });
        }
        function highlightMatch(text, query) {
            if (!query) return text;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            return text.replace(regex, '<strong class="text-match">$1</strong>');
        }
        function highlightAuthorName(author, query) {
            if (!query) return author;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            
            // If any part of the author name matches the query, highlight the whole name
            if (regex.test(author)) {
                return `<strong class="text-match">${author}</strong>`;
            }
            return author;
        }
            
        function highlightKeyword(keyword, query, currentKeyword) {
            if (currentKeyword) {
                return keyword === currentKeyword 
                    ? `<span class="badge bg-success text-white me-1">${keyword}</span>`
                    : `<span class="badge bg-success bg-opacity-10 text-success me-1">${keyword}</span>`;
            }
            if (!query) return `<span class="badge bg-success bg-opacity-10 text-success me-1">${keyword}</span>`;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            return regex.test(keyword) 
                ? `<span class="badge bg-success text-white me-1">${keyword}</span>`
                : `<span class="badge bg-success bg-opacity-10 text-success me-1">${keyword}</span>`;
        }
        
        function calculateScore(result, query) {
            if (!query) return 0;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            const countMatches = text => (text.match(regex) || []).length;
            return (countMatches(result.title) * 3) +
                   (countMatches(result.abstract)) +
                   (countMatches(result.authors.join(' ')) * 2) +
                   (countMatches(result.keywords.join(' ')) * 2);
        }
        
        function highlightAuthorName(author, query) {
            if (!query) return author;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            
            // If any part of the author name matches the query, highlight the whole name
            if (regex.test(author)) {
                return `<strong class="text-match">${author}</strong>`;
            }
            return author;
        }
            
            document.addEventListener('DOMContentLoaded', function () {
                const toast = new bootstrap.Toast(document.getElementById('guestSaveToast'));
                const loadingPlaceholder = document.getElementById('loadingPlaceholder');
                const resultsContent = document.getElementById('resultsContent');
                const paginationContainer = document.getElementById('paginationContainer');

                const authorName = document.getElementById("authorName");
                const authorPublished = document.getElementById("authorPublished")
                
                const savedTheses = new Set(JSON.parse(localStorage.getItem('savedTheses') || '[]'));
                const userId = '<%= locals.userId || "" %>';
                
                // Get the current URL parameters
                const authorId = "<%= authorid %>"
                let apiURL = new URL('/api/author', window.location.origin);
                apiURL.searchParams.append('id', authorId);
                
                const timeoutPromise = new Promise((_, reject) => setTimeout(() => {reject(new Error('timeout'))}, 20000));
                
                Promise.race([
                    fetch(apiURL),
                    timeoutPromise
                ])
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server error: ${response.status} ${response.statusText}`);
                    }
                    return response.text()
                        .then(data => {
                            try {
                                const json = JSON.parse(data);
                                console.log(json)
                                if (json.data && !json.searchResults) {
                                    json.author = {
                                        name: json.data.name,
                                        published: json.data.theses.length
                                    }
                                    json.searchResults = json.data.theses.map(item => ({
                                        id: item.id,
                                        title: item.title,
                                        authors: item.authors,
                                        year: item.year,
                                        abstract: item.abstract,
                                        keywords: item.keywords
                                    }));
                                }
                                
                                if (!json.searchResults) {
                                    json.searchResults = [];
                                }
                                
                                return json;
                            } catch (error) {
                                throw new Error(`Invalid JSON from the server: ${error}`);
                            }
                        });
                })
                .then(data => {
                    loadingPlaceholder.style.opacity = '1';
                    loadingPlaceholder.style.transition = 'opacity 0.3s ease-out';
                    loadingPlaceholder.style.opacity = '0';
                    
                    document.title = `${data.author.name} | Iskolar ni Simeon`;

                    authorName.textContent = data.author.name;
                    authorPublished.textContent = `${data.author.published} ${data.author.published === 1 ? "thesis" : "theses"} published`;
                    setTimeout(() => {
                        loadingPlaceholder.style.display = 'none';
                        // Hide loading indicator
                        console.log(data)
                        // Handle no results or empty data
                        if (!data || !data.searchResults || data.searchResults.length === 0) {
                            resultsContent.style.display = 'block';
                            resultsContent.innerHTML = `
                                <div class="text-center py-5">
                                    <i class="bi bi-search display-1 text-muted"></i>
                                    <h4 class="mt-3">No results found</h4>
                                    <p class="text-muted">${data && data.errmessage ? data.errmessage : 'Try different search terms or filters'}</p>
                                </div>
                            `;
                            
                            document.dispatchEvent(new CustomEvent('resultsLoaded', { 
                                detail: { count: 0 } 
                            }));
                            
                            return;
                        }
                        
                        // Initialize pagination
                        const searchResults = data.searchResults;
                        
                        const itemsPerPage = 5;
                        const totalPages = Math.ceil(searchResults.length / itemsPerPage);
                        
                        // Dispatch event with results count
                        document.dispatchEvent(new CustomEvent('resultsLoaded', { 
                            detail: { count: searchResults.length } 
                        }));
                        
                        // Build results HTML
                        let resultsHTML = '';
                        
                        searchResults.forEach((result, index) => {
                            const authors = result.authors.map(author => {
                                const parts = author.split(' ');
                                const lastName = parts.pop();
                                const initials = parts.map(part => part.charAt(0) + '.').join(' ');
                                const formattedName = `${lastName}, ${initials}`;
                                return highlightAuthorName(formattedName, data.author.name);
                            }).join(', ');
                            
                            resultsHTML += `
                                <div class="card border-0 shadow-sm hover-card mb-3 result-item no-select" data-page="${Math.floor(index / itemsPerPage) + 1}">
                                    <div class="card-body" id="${result.id}">
                                        <h5 class="card-title mb-3">
                                            <a href="/thesis/${result.id}" style="text-decoration: none; color: black">${result.title}</a>
                                        </h5>
                                        <div class="meta mb-2">
                                            <i class="bi bi-people"></i>
                                            ${authors}
                                        </div>
                                        <div class="meta mb-3">
                                            <i class="bi bi-calendar"></i>
                                            Published in ${result.year.toString()}
                                        </div>
                                        <p class="card-text">
                                            ${result.abstract.substring(0, 300) + (result.abstract.length > 300 ? '...' : '')}
                                        </p>
                                        <div class="keywords mb-3">
                                            ${result.keywords.map(kw => `<span class="badge bg-success bg-opacity-10 text-success me-1">${kw}</span>`).join(' ')}
                                        </div>
                                    </div>
                                    <div class="card-footer bg-transparent border-top">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <button class="btn btn-outline-success btn-sm" onclick="window.location.href = '/thesis/${result.id}'">
                                                Read thesis 
                                                <i class="bi bi-arrow-right ms-1"></i>
                                            </button>
                                            <button class="btn btn-outline-success btn-sm save-btn" id="save-${result.id}" data-thesis-id="${result.id}">
                                                <i class="bi bi-bookmark-fill me-2"></i>
                                                <span class="save-text">Save</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                        
                        let paginationHTML = `
                            <nav aria-label="Search results pages">
                                <ul class="pagination">
                                    <li class="page-item disabled" id="prevPage">
                                        <a class="page-link" href="#" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                        `;
                        
                        for (let i = 1; i <= totalPages; i++) {
                            paginationHTML += `
                                <li class="page-item ${i === 1 ? 'active' : ''}">
                                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                                </li>
                            `;
                        }
                        
                        paginationHTML += `
                                    <li class="page-item ${totalPages === 1 ? 'disabled' : ''}" id="nextPage">
                                        <a class="page-link" href="#" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        `;
                        
                        // Insert the results and pagination
                        resultsContent.innerHTML = resultsHTML;
                        resultsContent.style.display = 'block';
                        
                        paginationContainer.innerHTML = paginationHTML;
                        paginationContainer.style.display = 'flex';
                        
                        setupSaveButtons(savedTheses, toast, userId);
                        
                        setupPagination(totalPages);
                    }, 300);
                })
                .catch(error => {
                    loadingPlaceholder.style.display = 'none';
                    resultsContent.style.display = 'block';
                    resultsContent.innerHTML = `
                        <div class="text-center py-5">
                            <i class="bi bi-exclamation-circle display-1 text-danger"></i>
                            <h4 class="mt-3">${error.message === "timeout" ? "Request timeout" : "Oh no! D:"}</h4>
                            <p class="text-muted">${error.message === "timeout" ? "It took too long to process the request. Please try again." : 'There was a problem loading the search results. Please try again later.'}</p>
                        </div>
                    `;
                    console.error(error)
                });
            })
        </script>
    <% if (userId.split('-')[0] === "guest") { %>
<%- include('partials/footer.ejs') %>
    <% } %>

</body>
</html>