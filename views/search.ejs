<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>"<%= searchQuery %>" | Iskolar ni Simeon</title>
    <script disable-devtool-auto src='https://cdn.jsdelivr.net/npm/disable-devtool@latest'></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/css/search.css">
    <meta name="theme-color" content="#296c32">
</head>

<body>
    <div class="filter-backdrop" id="filterBackdrop"></div>
    <%- include('partials/header.ejs') %>
        <main class="search-page">
            <button id="filterToggle" class="btn btn-success rounded-circle d-md-none filter-toggle-btn">
                <i class="bi bi-funnel"></i>
            </button>
            <div class="search-hero mb-4 bg-success bg-opacity-10">
                <div class="container py-4">
                    <div class="row justify-content-center">
                        <div class="col-md-8">
                            <form action="/search" method="GET" class="search-form needs-validation" novalidate>
                                <div class="input-group input-group-lg shadow-sm has-validation">
                                    <input type="search" 
                                           name="q" 
                                           class="form-control border-success"
                                           placeholder="Search for thesis titles, authors, keywords..."
                                           value="<%= searchQuery %>"
                                           required
                                           minlength="1">
                                    <button type="submit" class="btn btn-success px-4">
                                        <i class="bi bi-search"></i>
                                    </button>
                                    <div class="invalid-feedback">
                                        Please enter a search term
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <div class="container">
                <div class="row g-4">
                    <!-- Filters Sidebar -->
                    <div class="col-md-3">
                        <div class="filters-wrapper d-md-block" id="filtersWrapper">
                            <div class="card border-0 shadow-sm">
                                <div class="card-body">
                                    <h5 class="card-title d-flex align-items-center">
                                        <i class="bi bi-funnel me-2"></i>
                                        Filters
                                    </h5>
                                    <hr>
                                    <div class="filter-group">
                                        <h6 class="fw-bold mb-3">Sort by</h6>
                                        <select class="form-select mb-3" id="sortSelect" name="sort">
                                            <option value="relevance" <%= sort === 'relevance' || !sort ? 'selected' : '' %>>Relevance</option>
                                            <option value="newest" <%= sort === 'newest' ? 'selected' : '' %>>Newest first</option>
                                            <option value="oldest" <%= sort === 'oldest' ? 'selected' : '' %>>Oldest first</option>
                                        </select>
                                    </div>
                                    <hr>
                                    <div class="filter-group">
                                        <h6 class="fw-bold mb-3">Research Type</h6>
                                        <select class="form-select mb-3" id="typeSelect" name="type">
                                            <option value="any" <%= !type ? 'selected' : '' %>>Any type</option>
                                            <option value="qualitative" <%= type === 'qualitative' ? 'selected' : '' %>>Qualitative</option>
                                            <option value="quantitative" <%= type === 'quantitative' ? 'selected' : '' %>>Quantitative</option>
                                            <option value="capstone" <%= type === 'capstone' ? 'selected' : '' %>>Capstone</option>
                                        </select>
                                    </div>
                                    <hr>
                                    <div class="filter-group">
                                        <h6 class="fw-bold mb-3">Year Range</h6>
                                        <div class="mb-3">
                                            <select class="form-select mb-3" id="yearRange" name="yearRange">
                                                <option value="any" <%=yearRange==='any' || !yearRange ? 'selected' : ''
                                                    %>>Any time</option>
                                                <option value="last-year" <%=yearRange==='last-year' ? 'selected' : ''
                                                    %>>Last year</option>
                                                <option value="last-5-years" <%=yearRange==='last-5-years' ? 'selected'
                                                    : '' %>>Last 5 years</option>
                                                <option value="custom" <%=yearRange==='custom' ? 'selected' : '' %>
                                                    >Custom range</option>
                                            </select>
                                        </div>
                                        <div class="row g-2" id="customYearInputs"
                                            style="display: <%= yearRange === 'custom' ? 'flex' : 'none' %>">
                                            <div class="col-6">
                                                <input type="number" class="form-control" id="yearFrom" name="yearFrom"
                                                    placeholder="From" value="<%= yearFrom || '' %>" min="1900"
                                                    max="<%= new Date().getFullYear() %>">
                                            </div>
                                            <div class="col-6">
                                                <input type="number" class="form-control" id="yearTo" name="yearTo"
                                                    placeholder="To" value="<%= yearTo || '' %>" min="1900"
                                                    max="<%= new Date().getFullYear() %>">
                                            </div>
                                        </div>
                                    </div>
                                    <hr>
                                    <button type="submit" class="btn btn-success w-100" id="applyFilters">Apply
                                        Filters</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Results Section -->
                    <div class="col-md-9">
                        <div class="results-wrapper">
                            <!-- Results Header -->
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <div id="resultsHeader">
                                    <h4 class="mb-1 text-success">Search Results</h4>
                                    <p class="text-muted mb-0" id="resultCountText">Searching for "<%= searchQuery %>"</p>
                                </div>
                            </div>
                            <hr>
                            <!-- Results List -->
                            <div class="results-container">
                                <%- include('partials/resultsContainer.ejs') %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        <script>
            (() => {
                const forms = document.querySelectorAll('.needs-validation');
                
                Array.from(forms).forEach(form => {
                    form.addEventListener('submit', event => {
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);

                    const searchInput = form.querySelector('input[type="search"]');
                    if (searchInput) {
                        searchInput.addEventListener('input', () => {
                            if (searchInput.value.trim().length === 0) {
                                searchInput.setCustomValidity('Please enter a search term');
                            } else {
                                searchInput.setCustomValidity('');
                            }
                        });
                    }
                });
            })();
            console.log('[search.ejs] Page loaded with query:', '<%= searchQuery %>');
            
            document.addEventListener('DOMContentLoaded', () => {
                console.log('[search.ejs] DOM fully loaded');
                
                // Update the results count once the data is loaded
                const updateResultsCount = (count) => {
                    console.log('[search.ejs] Updating result count to:', count);
                    document.getElementById('resultCountText').textContent = 
                        `Found ${count} results for "<%= searchQuery %>"`;
                };
                
                // Listen for a custom event that will be triggered when results are loaded
                document.addEventListener('resultsLoaded', (e) => {
                    console.log('[search.ejs] Received resultsLoaded event:', e.detail);
                    
                    // Update the counter in the header
                    if (e.detail && typeof e.detail.count !== 'undefined') {
                        updateResultsCount(e.detail.count);
                    }
                    
                    // Check for errors and add them to the page title
                    if (e.detail && e.detail.error) {
                        document.title = `Error - ${document.title}`;
                    }
                });
                
                console.log('[search.ejs] Event listener for resultsLoaded registered');
                
            });

            // Year range filter functionality
            const yearRangeSelect = document.getElementById('yearRange');
            const customYearInputs = document.getElementById('customYearInputs');
            const yearFrom = document.getElementById('yearFrom');
            const yearTo = document.getElementById('yearTo');
            const applyFilters = document.getElementById('applyFilters');
            const currentYear = new Date().getFullYear();

            // Initialize year inputs
            yearFrom.max = currentYear;
            yearTo.max = currentYear;

            // Show/hide custom inputs on page load
            if (yearRangeSelect.value === 'custom') {
                customYearInputs.style.display = 'flex';
            }

            yearRangeSelect.addEventListener('change', function () {
                customYearInputs.style.display = this.value === 'custom' ? 'flex' : 'none';
                if (this.value !== 'custom') {
                    yearFrom.value = '';
                    yearTo.value = '';
                }
            });

            applyFilters.addEventListener('click', function (e) {
                e.preventDefault();
                console.log('[search.ejs] Apply filters button clicked');
                
                const currentUrl = new URL(window.location.href);
                const searchParams = currentUrl.searchParams;

                // Create new URL with search parameters
                const newUrl = new URL('/search', window.location.origin);

                // Preserve query
                const query = searchParams.get('q');
                if (query) newUrl.searchParams.set('q', query);

                // Add sort parameter
                const sortValue = document.getElementById('sortSelect').value;
                if (sortValue && sortValue !== 'relevance') {
                    newUrl.searchParams.set('sort', sortValue);
                }

                // Add research type parameter
                const typeValue = document.getElementById('typeSelect').value;
                if (typeValue && typeValue !== 'any') {
                    newUrl.searchParams.set('type', typeValue);
                }

                // Add year range parameters
                const selectedRange = yearRangeSelect.value;
                if (selectedRange && selectedRange !== 'any') {
                    newUrl.searchParams.set('yearRange', selectedRange);
                    if (selectedRange === 'custom') {
                        const fromYear = yearFrom.value;
                        const toYear = yearTo.value;
                        if (fromYear) newUrl.searchParams.set('yearFrom', fromYear);
                        if (toYear) newUrl.searchParams.set('yearTo', toYear);
                    }
                }

                // Navigate to filtered results
                console.log('[search.ejs] Navigating to:', newUrl.toString());
                window.location.href = newUrl.toString();
            });

            // Year input validation
            yearFrom.addEventListener('input', function () {
                const value = parseInt(this.value);
                if (value > currentYear) {
                    this.value = currentYear;
                }
                if (yearTo.value && value > parseInt(yearTo.value)) {
                    yearTo.value = this.value;
                }
            });

            yearTo.addEventListener('input', function () {
                const value = parseInt(this.value);
                if (value > currentYear) {
                    this.value = currentYear;
                }
                if (yearFrom.value && value < parseInt(yearFrom.value)) {
                    yearFrom.value = this.value;
                }
            });

            // Mobile filter toggle functionality
            const filterToggle = document.getElementById('filterToggle');
            const filtersWrapper = document.getElementById('filtersWrapper');
            const filterBackdrop = document.getElementById('filterBackdrop');

            function toggleFilters(show) {
                if (show) {
                    filtersWrapper.classList.remove('hiding');
                    filtersWrapper.classList.add('show');
                    filterToggle.classList.add('active');
                    filterBackdrop.classList.add('show');
                    document.body.style.overflow = 'hidden';
                } else {
                    filtersWrapper.classList.add('hiding');
                    filtersWrapper.classList.remove('show');
                    filterToggle.classList.remove('active');
                    filterBackdrop.classList.remove('show');
                    document.body.style.overflow = '';

                    // Remove hiding class after animation completes
                    filtersWrapper.addEventListener('animationend', () => {
                        filtersWrapper.classList.remove('hiding');
                    }, { once: true });
                }
            }

            filterToggle.addEventListener('click', () => {
                toggleFilters(!filtersWrapper.classList.contains('show'));
            });

            filterBackdrop.addEventListener('click', () => {
                toggleFilters(false);
            });

            // Close filters when clicking outside or pressing escape
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && filtersWrapper.classList.contains('show')) {
                    toggleFilters(false);
                }
            });
        </script>
        <script>
        function setupSaveButtons(savedTheses, toast, userId) {
            document.querySelectorAll('.save-btn').forEach(button => {
                const thesisId = button.dataset.thesisId;
                const saveText = button.querySelector('.save-text');
                
                if (userId.split('-')[0] === 'guest') {
                    button.disabled = true;
                    button.title = 'Please log in to save theses';
                    saveText.textContent = 'Log in to save';
                    return;
                }
                
                if (savedTheses.has(thesisId)) {
                    button.classList.add('active');
                    saveText.textContent = 'Saved';
                }
                button.addEventListener('click', async () => {
                    if (userId.split('-')[0] === 'guest') {
                        toast.show();
                        return;
                    }
                    if (button.disabled) return;
                    
                    const method = savedTheses.has(thesisId) ? 'remove' : 'add';
                    
                    button.disabled = true;
                    button.innerHTML = `<span class="spinner-border spinner-border-sm"></span>`;
                    try {
                        const response = await fetch(`${window.location.origin}/save/${thesisId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ method })
                        });
                        
                        if (response.ok) {
                            method === 'add' ? savedTheses.add(thesisId) : savedTheses.delete(thesisId);
                            button.classList.toggle('active', method === 'add');
                            button.innerHTML = `<i class="bi bi-bookmark-fill me-2"></i><span class="save-text">${method === 'add' ? 'Saved' : 'Save'}</span>`;
                            localStorage.setItem('savedTheses', JSON.stringify([...savedTheses]));
                        }
                    } catch (error) {
                        button.innerHTML = `<i class="bi bi-bookmark-fill me-2"></i><span class="save-text">${savedTheses.has(thesisId) ? 'Saved' : 'Save'}</span>`;
                    } finally {
                        button.disabled = false;
                    }
                });
            });
        }
        
        function setupPagination(totalPages) {
            let currentPage = 1;
            
            function showPage(pageNum) {
                document.querySelectorAll('.result-item').forEach(item => 
                    item.style.display = item.dataset.page == pageNum ? 'block' : 'none'
                );
                const pagination = document.querySelector('.pagination');
                if (!pagination) return;
                const prevPageBtn = document.getElementById('prevPage');
                const nextPageBtn = document.getElementById('nextPage');
                
                document.querySelectorAll('.pagination .page-item').forEach(item => {
                    if (!item.id) item.classList.toggle('active', item.querySelector(`[data-page="${pageNum}"]`));
                });
                prevPageBtn.classList.toggle('disabled', pageNum === 1);
                nextPageBtn.classList.toggle('disabled', pageNum === totalPages);
                currentPage = pageNum;
            }
            showPage(1);
            document.querySelectorAll('.pagination .page-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const page = e.currentTarget.dataset.page;
                    if (page) {
                        showPage(parseInt(page));
                    } else if (e.currentTarget.getAttribute('aria-label') === 'Previous' && currentPage > 1) {
                        showPage(currentPage - 1);
                    } else if (e.currentTarget.getAttribute('aria-label') === 'Next' && currentPage < totalPages) {
                        showPage(currentPage + 1);
                    };
                    window.scrollTo({top: 0, behavior: "smooth"});
                });
            });
        }
        function highlightMatch(text, query) {
            if (!query) return text;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            return text.replace(regex, '<strong class="text-match">$1</strong>');
        }
        function highlightAuthorName(author, query) {
            if (!query) return author;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            
            if (regex.test(author)) {
                return `<strong class="text-match">${author}</strong>`;
            }
            return author;
        }
            
        function highlightKeyword(keyword, query, currentKeyword) {
            if (currentKeyword) {
                return keyword === currentKeyword 
                    ? `<span class="badge bg-success text-white me-1">${keyword}</span>`
                    : `<span class="badge bg-success bg-opacity-10 text-success me-1">${keyword}</span>`;
            }
            if (!query) return `<span class="badge bg-success bg-opacity-10 text-success me-1">${keyword}</span>`;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            return regex.test(keyword) 
                ? `<span class="badge bg-success text-white me-1">${keyword}</span>`
                : `<span class="badge bg-success bg-opacity-10 text-success me-1">${keyword}</span>`;
        }
        
        function calculateScore(result, query) {
            if (!query) return 0;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            const countMatches = text => (text.match(regex) || []).length;
            return (countMatches(result.title) * 3) +
                   (countMatches(result.abstract)) +
                   (countMatches(result.authors.join(' ')) * 2) +
                   (countMatches(result.keywords.join(' ')) * 2);
        }
        
        function highlightAuthorName(author, query) {
            if (!query) return author;
            const searchTerms = query.split(/\s+/).filter(term => term.length > 0);
            const regex = new RegExp(`(${searchTerms.join('|')})`, 'gi');
            
            // If any part of the author name matches the query, highlight the whole name
            if (regex.test(author)) {
                return `<strong class="text-match">${author}</strong>`;
            }
            return author;
        }
            
            document.addEventListener('DOMContentLoaded', function () {
                const toast = new bootstrap.Toast(document.getElementById('guestSaveToast'));
                const loadingPlaceholder = document.getElementById('loadingPlaceholder');
                const resultsContent = document.getElementById('resultsContent');
                const paginationContainer = document.getElementById('paginationContainer');
                const savedTheses = new Set(JSON.parse(localStorage.getItem('savedTheses') || '[]'));
                const userId = '<%= locals.userId || "" %>';
                
                // Get the current URL parameters
                const urlParams = new URLSearchParams(window.location.search);
                const searchQuery = urlParams.get('q') || '';
                const sort = urlParams.get('sort') || 'relevance';
                const keyword = urlParams.get('keyword') || '';
                const type = urlParams.get('type') || '';
                const yearRange = urlParams.get('yearRange') || '';
                const yearFrom = urlParams.get('yearFrom') || '';
                const yearTo = urlParams.get('yearTo') || '';
                
                let apiURL = new URL('/api/search', window.location.origin);
                apiURL.searchParams.append('q', searchQuery);
                apiURL.searchParams.append('sort', sort);
                apiURL.searchParams.append('keyword', keyword);
                apiURL.searchParams.append('type', type);
                apiURL.searchParams.append('yearRange', yearRange);
                apiURL.searchParams.append('yearFrom', yearFrom);
                apiURL.searchParams.append('yearTo', yearTo); 
                
                const timeoutPromise = new Promise((_, reject) => setTimeout(() => {reject(new Error('timeout'))}, 20000));
                
                Promise.race([
                    fetch(apiURL),
                    timeoutPromise
                ])
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Server error: ${response.status} ${response.statusText}`);
                    }
                    return response.text()
                        .then(data => {
                            try {
                                const json = JSON.parse(data);
                                if (json.data && !json.searchResults) {
                                    json.searchResults = json.data.map(item => ({
                                        id: item.id,
                                        title: item.title,
                                        authors: item.authors,
                                        year: item.year,
                                        abstract: item.abstract,
                                        keywords: item.keywords
                                    }));
                                }
                                
                                if (!json.searchResults) {
                                    json.searchResults = [];
                                }
                                
                                return json;
                            } catch (error) {
                                throw new Error(`Invalid JSON from the server: ${error}`);
                            }
                        });
                })
                .then(data => {
                    loadingPlaceholder.style.opacity = '1';
                    loadingPlaceholder.style.transition = 'opacity 0.3s ease-out';
                    loadingPlaceholder.style.opacity = '0';
                    
                    setTimeout(() => {
                        loadingPlaceholder.style.display = 'none';
                        // Hide loading indicator
                        console.log(data)
                        // Handle no results or empty data
                        if (!data || !data.searchResults || data.searchResults.length === 0) {
                            resultsContent.style.display = 'block';
                            resultsContent.innerHTML = `
                                <div class="text-center py-5">
                                    <i class="bi bi-search display-1 text-muted"></i>
                                    <h4 class="mt-3">No results found</h4>
                                    <p class="text-muted">${data && data.errmessage ? data.errmessage : 'Try different search terms or filters'}</p>
                                </div>
                            `;
                            
                            document.dispatchEvent(new CustomEvent('resultsLoaded', { 
                                detail: { count: 0 } 
                            }));
                            
                            return;
                        }
                        
                        // Initialize pagination
                        const searchResults = data.searchResults;
                        
                        const itemsPerPage = 5;
                        const totalPages = Math.ceil(searchResults.length / itemsPerPage);
                        
                        // Dispatch event with results count
                        document.dispatchEvent(new CustomEvent('resultsLoaded', { 
                            detail: { count: searchResults.length } 
                        }));
                        
                        // Build results HTML
                        let resultsHTML = '';
                        
                        searchResults.forEach((result, index) => {
                            const authors = result.authors.map(author => {
                                const parts = author.split(' ');
                                const lastName = parts.pop();
                                const initials = parts.map(part => part.charAt(0) + '.').join(' ');
                                const formattedName = `${lastName}, ${initials}`;
                                return highlightAuthorName(formattedName, searchQuery);
                            }).join(', ');
                            
                            resultsHTML += `
                                <div class="card border-0 shadow-sm hover-card mb-3 result-item no-select" data-page="${Math.floor(index / itemsPerPage) + 1}">
                                    <div class="card-body" id="${result.id}">
                                        <h5 class="card-title mb-3">
                                            <a href="/thesis/${result.id}" style="text-decoration: none; color: black">${highlightMatch(result.title, searchQuery)}</a>
                                        </h5>
                                        <div class="meta mb-2">
                                            <i class="bi bi-people"></i>
                                            ${authors}
                                        </div>
                                        <div class="meta mb-3">
                                            <i class="bi bi-calendar"></i>
                                            Published in ${highlightMatch(result.year.toString(), searchQuery)}
                                        </div>
                                        <p class="card-text">
                                            ${highlightMatch(result.abstract.substring(0, 300) + (result.abstract.length > 300 ? '...' : ''), searchQuery)}
                                        </p>
                                        <div class="keywords mb-3">
                                            ${result.keywords.map(kw => highlightKeyword(kw, searchQuery, data.keyword ? data.keyword.word : null)).join(' ')}
                                        </div>
                                    </div>
                                    <div class="card-footer bg-transparent border-top">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <button class="btn btn-outline-success btn-sm" onclick="window.location.href = '/thesis/${result.id}'">
                                                Read thesis 
                                                <i class="bi bi-arrow-right ms-1"></i>
                                            </button>
                                            <button class="btn btn-outline-success btn-sm save-btn" id="save-${result.id}" data-thesis-id="${result.id}">
                                                <i class="bi bi-bookmark-fill me-2"></i>
                                                <span class="save-text">Save</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                        
                        let paginationHTML = `
                            <nav aria-label="Search results pages">
                                <ul class="pagination">
                                    <li class="page-item disabled" id="prevPage">
                                        <a class="page-link" href="#" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                        `;
                        
                        for (let i = 1; i <= totalPages; i++) {
                            paginationHTML += `
                                <li class="page-item ${i === 1 ? 'active' : ''}">
                                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                                </li>
                            `;
                        }
                        
                        paginationHTML += `
                                    <li class="page-item ${totalPages === 1 ? 'disabled' : ''}" id="nextPage">
                                        <a class="page-link" href="#" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        `;
                        
                        // Insert the results and pagination
                        resultsContent.innerHTML = resultsHTML;
                        resultsContent.style.display = 'block';
                        
                        paginationContainer.innerHTML = paginationHTML;
                        paginationContainer.style.display = 'flex';
                        
                        setupSaveButtons(savedTheses, toast, userId);
                        
                        setupPagination(totalPages);
                    }, 300);
                })
                .catch(error => {
                    loadingPlaceholder.style.display = 'none';
                    resultsContent.style.display = 'block';
                    resultsContent.innerHTML = `
                        <div class="text-center py-5">
                            <i class="bi bi-exclamation-circle display-1 text-danger"></i>
                            <h4 class="mt-3">${error.message === "timeout" ? "Request timeout" : "Oh no! D:"}</h4>
                            <p class="text-muted">${error.message === "timeout" ? "It took too long to process the request. Please try again later." : 'There was a problem loading the search results. Please try again later.'}</p>
                            <button type="button" class="btn btn-outline-success" onclick="window.location.reload()">Refresh the page</button>
                        </div>
                    `;
                });
            })
        </script>
</body>
<% if (userId.split('-')[0] === "guest") { %>
    <%- include('partials/footer.ejs') %>
<% } %>
</html>