<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script disable-devtool-auto src='https://cdn.jsdelivr.net/npm/disable-devtool@latest'></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <meta name="theme-color" content="#296c32">
    <title>Saved | Iskolar ni Simeon</title>
    <link rel="stylesheet" href="/css/saved.css">
</head>
<body>
    <%- include('partials/header.ejs') %>
    <main class="saved-page">
        <div class="hero-section mb-4 bg-success bg-opacity-10">
            <div class="container py-4">
                <div class="row">
                    <div class="col-12">
                        <h1 class="greeting">
                            <i class="bi bi-bookmark-heart-fill text-success me-2"></i>
                            Good day, <%= name %>!
                        </h1>
                        <p class="text-muted mb-0">Here are your saved theses.</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="results-wrapper bg-white p-4 rounded shadow-sm">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div>
                                <h4 class="mb-1 text-success">Saved Theses</h4>
                                <p class="text-muted mb-0" id="savedCount">Loading your saved theses...</p>
                            </div>
                        </div>
                        <hr>
                        <div id="loadingPlaceholder">
                            <div class="card border-0 shadow-sm hover-card mb-3 result-item no-select">
                                <div class="card-body">
                                    <h5 class="card-title mb-3 placeholder-wave">
                                        <span class="placeholder col-6"></span>
                                    </h5>
                                    <div class="meta mb-2 placeholder-wave">
                                        <i class="bi bi-people"></i>
                                        <span class="placeholder col-4"></span>
                                    </div>
                                    <div class="meta mb-3 placeholder-wave">
                                        <i class="bi bi-calendar"></i>
                                        <span class="placeholder col-3"></span>
                                    </div>
                                    <p class="card-text placeholder-wave">
                                        <span class="placeholder col-12"></span>
                                        <span class="placeholder col-12"></span>
                                        <span class="placeholder col-8"></span>
                                    </p>
                                    <div class="keywords mb-3 placeholder-wave">
                                        <span class="placeholder col-2 bg-success"></span>
                                        <span class="placeholder col-2 bg-success"></span>
                                        <span class="placeholder col-2 bg-success"></span>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent border-top">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <button class="btn btn-outline-success btn-sm disabled placeholder col-2"></button>
                                        <button class="btn btn-outline-success btn-sm disabled placeholder col-2"></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Results content will be dynamically inserted here -->
                        <div id="resultsContent" style="display: none;"></div>
                        
                        <!-- Pagination will be inserted here -->
                        <div id="paginationContainer" class="d-flex justify-content-center mt-4" style="display: none;"></div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <!-- Toast for guest users attempting to save -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="guestSaveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="bi bi-exclamation-circle text-warning me-2"></i>
                <strong class="me-auto">Sign in required</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                Please sign in to save theses to your library.
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const toast = new bootstrap.Toast(document.getElementById('guestSaveToast'));
            const loadingPlaceholder = document.getElementById('loadingPlaceholder');
            const resultsContent = document.getElementById('resultsContent');
            const paginationContainer = document.getElementById('paginationContainer');
            const savedCountElem = document.getElementById('savedCount');
            
            const savedTheses = new Set(JSON.parse(localStorage.getItem('savedTheses') || '[]'));
            const userId = '<%= locals.userId || "" %>';
            
            if (userId.split('-')[0] === 'guest') {
                window.location.href = '/login';
                return;
            }
            
            // Fetch saved theses
            const apiURL = new URL('/api/saved', window.location.origin);
            const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), 20000));
            
            Promise.race([
                fetch(apiURL),
                timeoutPromise
            ])
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Server error: ${response.status} ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                loadingPlaceholder.style.opacity = '1';
                loadingPlaceholder.style.transition = 'opacity 0.3s ease-out';
                loadingPlaceholder.style.opacity = '0';
                
                setTimeout(() => {
                    loadingPlaceholder.style.display = 'none';
                    
                    // Handle no results or empty data
                    if (!data || !data.ok || !data.data || data.data.length === 0) {
                        resultsContent.style.display = 'block';
                        resultsContent.innerHTML = `
                            <div class="text-center py-5">
                                <i class="bi bi-bookmark-x display-1 text-muted"></i>
                                <h4 class="mt-3">No saved theses found</h4>
                                <p class="text-muted">You have no saved theses. Click the <strong>save</strong> button when you find a thesis you like to save it here.</p>
                            </div>
                        `;
                        savedCountElem.textContent = "You have 0 saved theses";
                        return;
                    }
                    
                    // Initialize pagination
                    const searchResults = data.data;
                    
                    const itemsPerPage = 5;
                    const totalPages = Math.ceil(searchResults.length / itemsPerPage);
                    
                    // Update saved count
                    savedCountElem.textContent = `You have ${searchResults.length} saved ${searchResults.length === 1 ? 'thesis' : 'theses'}`;
                    
                    // Build results HTML
                    let resultsHTML = '';
                    
                    searchResults.forEach((result, index) => {
                        const authors = result.authors.map(author => {
                            const parts = author.split(' ');
                            const lastName = parts.pop();
                            const initials = parts.map(part => part.charAt(0) + '.').join(' ');
                            return `${lastName}, ${initials}`;
                        }).join(', ');
                        
                        resultsHTML += `
                            <div class="card border-0 shadow-sm hover-card mb-3 result-item" data-page="${Math.floor(index / itemsPerPage) + 1}">
                                <div class="card-body" id="${result.id}">
                                    <h5 class="card-title mb-3">
                                        <a href="/thesis/${result.id}" style="text-decoration: none; color: black">${result.title}</a>
                                    </h5>
                                    <div class="meta mb-2">
                                        <i class="bi bi-people"></i>
                                        ${authors}
                                    </div>
                                    <div class="meta mb-3">
                                        <i class="bi bi-calendar"></i>
                                        Published in ${result.year}
                                    </div>
                                    <p class="card-text">
                                        ${result.abstract.substring(0, 300) + (result.abstract.length > 300 ? '...' : '')}
                                    </p>
                                    <div class="keywords mb-3">
                                        ${result.keywords.map(kw => `<span class="badge bg-success bg-opacity-10 text-success me-1">${kw}</span>`).join(' ')}
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent border-top">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <button class="btn btn-outline-success btn-sm" onclick="window.location.href = '/thesis/${result.id}'">
                                            View Details
                                            <i class="bi bi-arrow-right ms-1"></i>
                                        </button>
                                        <button class="btn btn-outline-success save-btn active" id="save-${result.id}" data-thesis-id="${result.id}">
                                            <i class="bi bi-bookmark-fill me-2"></i>
                                            <span class="save-text">Saved</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `;
                    });
                    
                    // Only show pagination if there's more than one page
                    if (totalPages > 1) {
                        let paginationHTML = `
                            <nav aria-label="Search results pages">
                                <ul class="pagination">
                                    <li class="page-item disabled" id="prevPage">
                                        <a class="page-link" href="#" aria-label="Previous">
                                            <span aria-hidden="true">&laquo;</span>
                                        </a>
                                    </li>
                        `;
                        
                        for (let i = 1; i <= totalPages; i++) {
                            paginationHTML += `
                                <li class="page-item ${i === 1 ? 'active' : ''}">
                                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                                </li>
                            `;
                        }
                        
                        paginationHTML += `
                                    <li class="page-item ${totalPages === 1 ? 'disabled' : ''}" id="nextPage">
                                        <a class="page-link" href="#" aria-label="Next">
                                            <span aria-hidden="true">&raquo;</span>
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        `;
                        
                        paginationContainer.innerHTML = paginationHTML;
                        paginationContainer.style.display = 'flex';
                    }
                    
                    // Insert the results
                    resultsContent.innerHTML = resultsHTML;
                    resultsContent.style.display = 'block';
                    
                    // Setup save buttons
                    setupSaveButtons();
                    
                    // Setup pagination if needed
                    if (totalPages > 1) {
                        setupPagination(totalPages);
                    }
                }, 300);
            })
            .catch(error => {
                loadingPlaceholder.style.display = 'none';
                resultsContent.style.display = 'block';
                resultsContent.innerHTML = `
                    <div class="text-center py-5">
                        <i class="bi bi-exclamation-circle display-1 text-danger"></i>
                        <h4 class="mt-3">${error.message === "timeout" ? "Request timeout" : "Error"}</h4>
                        <p class="text-muted">${error.message === "timeout" ? "It took too long to process the request. Please try again." : 'There was a problem loading your saved theses. Please try again later.'}</p>
                    </div>
                `;
                savedCountElem.textContent = "Could not load saved theses";
                console.error(error);
            });
            
            function setupSaveButtons() {
                document.querySelectorAll('.save-btn').forEach(button => {
                    const thesisId = button.dataset.thesisId;
                    
                    button.addEventListener('click', async function() {
                        if (button.disabled) return;
                        
                        button.disabled = true;
                        button.innerHTML = `<span class="spinner-border spinner-border-sm"></span>`;
                        
                        try {
                            const response = await fetch(`${window.location.origin}/save/${thesisId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ method: 'remove' })
                            });
                            
                            if (response.ok) {
                                // Remove from localStorage
                                savedTheses.delete(thesisId);
                                localStorage.setItem('savedTheses', JSON.stringify([...savedTheses]));
                                
                                // Remove the card with animation
                                const card = button.closest('.result-item');
                                card.style.transition = 'all 0.3s ease-out';
                                card.style.opacity = '0';
                                card.style.transform = 'translateY(-20px)';
                                
                                setTimeout(() => {
                                    card.remove();
                                    
                                    // Update count
                                    const remainingCount = document.querySelectorAll('.result-item').length;
                                    savedCountElem.textContent = `You have ${remainingCount} saved ${remainingCount === 1 ? 'thesis' : 'theses'}`;
                                    
                                    // Check if we need to show "no saved theses" message
                                    if (remainingCount === 0) {
                                        resultsContent.innerHTML = `
                                            <div class="text-center py-5">
                                                <i class="bi bi-bookmark-x display-1 text-muted"></i>
                                                <h4 class="mt-3">No saved theses found</h4>
                                                <p class="text-muted">You have no saved theses. Click the <strong>save</strong> button when you find a thesis you like to save it here.</p>
                                            </div>
                                        `;
                                        
                                        // Hide pagination if no results
                                        paginationContainer.style.display = 'none';
                                    } else {
                                        // Recalculate pagination if needed
                                        const itemsPerPage = 5;
                                        const newTotalPages = Math.ceil(remainingCount / itemsPerPage);
                                        
                                        if (paginationContainer.style.display !== 'none' && newTotalPages !== totalPages) {
                                            setupPagination(newTotalPages);
                                        }
                                    }
                                }, 300);
                            } else {
                                button.innerHTML = `<i class="bi bi-bookmark-fill me-2"></i><span class="save-text">Saved</span>`;
                                button.disabled = false;
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            button.innerHTML = `<i class="bi bi-bookmark-fill me-2"></i><span class="save-text">Saved</span>`;
                            button.disabled = false;
                        }
                    });
                });
            }
            
            function setupPagination(totalPages) {
                let currentPage = 1;
                
                function showPage(pageNum) {
                    document.querySelectorAll('.result-item').forEach(item => {
                        item.style.display = item.dataset.page == pageNum ? 'block' : 'none';
                    });
                    
                    document.querySelectorAll('.pagination .page-item').forEach(item => {
                        if (!item.id) {
                            item.classList.toggle('active', item.querySelector(`[data-page="${pageNum}"]`));
                        }
                    });
                    
                    document.getElementById('prevPage').classList.toggle('disabled', pageNum === 1);
                    document.getElementById('nextPage').classList.toggle('disabled', pageNum === totalPages);
                    currentPage = pageNum;
                }
                
                // Initialize first page
                showPage(1);
                
                // Add click handlers to pagination links
                document.querySelectorAll('.pagination .page-link').forEach(link => {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        if (e.currentTarget.dataset.page) {
                            showPage(parseInt(e.currentTarget.dataset.page));
                        } else if (e.currentTarget.getAttribute('aria-label') === 'Previous' && currentPage > 1) {
                            showPage(currentPage - 1);
                        } else if (e.currentTarget.getAttribute('aria-label') === 'Next' && currentPage < totalPages) {
                            showPage(currentPage + 1);
                        }
                        window.scrollTo({ top: 0, behavior: "smooth" });
                    });
                });
            }
        });
    </script>
    
    <% if (userId.split('-')[0] === "guest") { %>
        <%- include('partials/footer.ejs') %>
    <% } %>
</body>
</html>
