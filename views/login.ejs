<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/login.css">
    <script src="https://accounts.google.com/gsi/client" async></script>
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="cyan" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="cyan" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <title>Login | Iskolar ni Simeon</title>
</head>
<body>
  <div class="modal fade" id="termsModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="termsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="termsModalLabel">Terms and Conditions</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <%- include("partials/tac.ejs") %>
          <div class="form-check mt-3">
            <input class="form-check-input" type="checkbox" id="agreeCheckbox">
            <label class="form-check-label" for="agreeCheckbox">
              I have read and agree to the Terms and Conditions
            </label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-success" id="understoodBtn" disabled>
            Proceed
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="outer-container">
    <div id="background">
      <img src="/images/inswhite.svg" alt="Logo" draggable="false">
      <p class="backgroundtitle montserrat-800">Iskolar ni Simeon</p>
      <p class="backgroundsubtitle montserrat-400">
        <span>From </span> <span>GJCians,</span> <span>to </span> <span>GJCians.</span>
      </p>
    </div>
    <div id="login">
      <img src="/images/inswhite.svg" alt="Logo" draggable="false">
      <h1 class="montserrat-800 logintitle"></h1>
      <div id="buttonDiv" class="signin" data-bs-toggle="modal"></div>
      <% if (isLibraryPort) { %>
        <div class="divider">
          <span class="divider-text">or</span>
        </div>
        <button class="guest-btn" id="guest">Continue as guest</button>
        <% } %>
        <div id="loader" class="loader">
          <div class="check"></div>
          <div class="error-x"></div>
        </div>
        <div id="loaderText" class="loader-text">Logging in...</div>
      <div class="footer">
        <p class="montserrat-400 verse"><i>"Let us not become weary in doing good, for at the proper time we will reap a harvest if we do not give up"</i> <br> <i><b>- Galatians 6:9</b></i></p>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
        const words = document.querySelectorAll('.backgroundsubtitle span');
        words.forEach((word, index) => {
            word.style.animationDelay = `${index * 0.1}s`;
        });
    });
  </script>

<script defer>
document.addEventListener("DOMContentLoaded", function() {

  const elements = {
    signin: document.querySelector('.signin'),
    loader: document.getElementById('loader'),
    loaderText: document.getElementById('loaderText'),
    divider: document.querySelector('.divider'),
    guestBtn: document.querySelector('.guest-btn'),
    understoodBtn: document.getElementById('understoodBtn')
  };

  function toggleElements(show) {
    const display = show ? 'block' : 'none';
    elements.signin.style.display = display;
    if (elements.divider) {
      elements.divider.style.display = display;
      elements.guestBtn.style.display = display;
    }
    elements.loader.style.display = !show ? 'block' : 'none';
    elements.loaderText.style.display = !show ? 'block' : 'none';
  }

  function handleResponse(success, message) {
    elements.loader.classList.remove('success', 'error');
    elements.loader.classList.add(success ? 'success' : 'error');
    elements.loaderText.textContent = message;
    
    if (success) {
      setTimeout(() => {
        elements.loader.classList.add('redirect');
        elements.loaderText.textContent = "Redirecting...";
        setTimeout(() => location.replace('/'), 1000);
      }, 1500);
    } else {
      elements.loaderText.innerHTML = `
        <div>Login error:</div>
        <small class="text-white-50">${message}</small>
        <div class="mt-2">
          <button onclick="resetLoader()" class="btn btn-sm btn-outline-light">Try Again</button>
        </div>`;
    }
  }

  async function setupSession(data, isGuest = false) {
    try {
      const endpoint = isGuest ? '/auth/guest-session' : '/auth/setup-session';
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ jwtToken: data.jwtToken, userId: data.token.sub, name: data.token.name, picture: data.token.picture })
      });

      if (!response.ok) throw new Error('Session setup failed');
      handleResponse(true, isGuest ? "Logged in as guest!" : "Successfully logged in!");
    } catch (error) {
      console.error("Session setup error:", error);
      handleResponse(false, error.message);
    }
  }

  async function handleLogin(isGuest) {
    if (isGuest) {
      const termsModal = new bootstrap.Modal(document.getElementById('termsModal'));
      termsModal.show();

      const agreeCheckbox = document.getElementById('agreeCheckbox');
      const understood = elements.understoodBtn;
      
      // Update button state based on checkbox
      agreeCheckbox.addEventListener('change', function() {
        understood.disabled = !this.checked;
      });

      understood.onclick = async function() {
        termsModal.hide();
        elements.signin.style.display = 'none';
        elements.divider.style.display = 'none';
        elements.guestBtn.style.display = 'none';
        elements.loader.style.display = 'block';
        elements.loader.style.opacity = '1';
        elements.loader.style.visibility = 'visible';
        elements.loaderText.style.display = 'block';
        elements.loaderText.style.visibility = 'visible';
        
        try {
          const response = await fetch('<%= server_api %>/guest-login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'Authorization': '<%= guest_api_key %>'
            },
            credentials: 'include',
            mode: 'cors',
            body: JSON.stringify({ signinas: 'guest' })
          });

          if (!response.ok) throw new Error(`Guest login failed: ${response.status}`);
          const data = await response.json();
          await setupSession(data, true);
        } catch (error) {
          console.error("Guest login error:", error);
          handleResponse(false, error.message);
        }
      };
    } else {
      toggleElements(false);
      
      try {
        const response = await fetch('<%= server_api %>/guest-login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': '<%= guest_api_key %>'
          },
          credentials: 'include',
          mode: 'cors',
          body: JSON.stringify({ signInAs: 'guest' })
        });

        if (!response.ok) throw new Error('Guest login failed');
        const data = await response.json();
        await setupSession(data, true);
      }
      // Regular login handled by Google callback
      catch (error) {
        console.error(isGuest ? "Guest login error:" : "Login error:", error);
        handleResponse(false, error.message);
      }
    }
  }

  function handleCredentialResponse(response) {
    const termsModal = new bootstrap.Modal(document.getElementById('termsModal'));
    termsModal.show();

    const agreeCheckbox = document.getElementById('agreeCheckbox');
    const understood = elements.understoodBtn;
    
    // Update button state based on checkbox
    agreeCheckbox.addEventListener('change', function() {
      understood.disabled = !this.checked;
    });

    understood.onclick = async function() {
      termsModal.hide();
      toggleElements(false);

      try {
        const loginResponse = await fetch("<%= server_api %>/login", {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          credentials: 'include',
          mode: 'cors',
          body: JSON.stringify({ 
            'credential': response.credential, 
            'clientId': response.clientId 
          }),
        });

        if (!loginResponse.ok) {
          throw new Error(`Login failed: ${loginResponse.status}`);
        }

        const data = await loginResponse.json();
        console.log(data);
        localStorage.setItem('savedTheses', JSON.stringify(data.saved?.data?.map(thesis => thesis.id || [])));
        
        await setupSession(data);
      } catch (error) {
        console.error("Login error:", error);
        const message = !navigator.onLine ? 
          "You appear to be offline. Please check your internet connection." :
          error.message.includes("Failed to fetch") ?
          `Cannot reach server at ${window.location.origin}. Please try again later.` :
          error.message || "Login failed. Please try again.";
        
        handleResponse(false, message);
      }
    }
  }

  // Event Listeners
  if (elements.guestBtn) {
    elements.guestBtn.addEventListener('click', () => handleLogin(true));
  }

  // Google Sign-in initialization
  window.onload = function() {
    google.accounts.id.initialize({
      client_id: '<%= oauthid %>',
      callback: handleCredentialResponse
    });
    google.accounts.id.renderButton(
      document.getElementById("buttonDiv"),
      { theme: "outline", size: "medium", text: "signin", shape: "pill", locale: "us_en"}
    );
    google.accounts.id.prompt();
  }
});

// Add resetLoader function
function resetLoader() {
  window.location.reload();
}
</script>
</body>
</html>
